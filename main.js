const board = document.getElementById("gameBoard");
const restartBtn = document.getElementById("restart");
const toggleModeBtn = document.getElementById("toggleMode");
const toggleOpenModeBtn = document.getElementById("toggleOpenMode");

let flipped = [];
let selected = []; // –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞
let lock = false;
let easyMode = false; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
let openMode = false; // –Ω–æ–≤—ã–π –æ—Ç–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º

// –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–π
const FLIP_MS = 600; // –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å transition —É .inner
const SHAKE_MS = 400;

// üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä—ã –¥—Ä–æ–±–µ–π
const pairs = [
  ["1/2", "2/4"],
  ["1/3", "2/6"],
  ["3/4", "6/8"],
  ["2/5", "4/10"],
  ["5/6", "10/12"],
  ["1/5", "2/10"],
  ["2/3", "4/6"],
  ["3/5", "6/10"]
];

// –ü–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –ª—ë–≥–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
const colors = [
  "red", "blue", "green", "purple",
  "orange", "teal", "brown", "magenta"
];

let cards = [];
pairs.forEach(([a, b], index) => {
  cards.push({ pair: a, frac: a, color: colors[index] });
  cards.push({ pair: a, frac: b, color: colors[index] });
});

function shuffle(array) {
  return array.sort(() => Math.random() - 0.5);
}

function createFractionHTML(frac, color) {
  const [num, den] = frac.split("/");
  // –í –æ—Ç–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ —á—ë—Ä–Ω—ã–π —Ü–≤–µ—Ç
  const displayColor = openMode ? 'black' : (easyMode ? color : 'black');
  return `
    <div class="fraction" style="color: ${displayColor}">
      <div class="numerator">${num}</div>
      <div class="denominator">${den}</div>
    </div>
  `;
}

function createBoard() {
  board.innerHTML = "";
  flipped = [];
  selected = [];
  lock = false;

  shuffle(cards).forEach(cardData => {
    const card = document.createElement("div");
    card.classList.add("card");
    card.dataset.pair = cardData.pair;

    const inner = document.createElement("div");
    inner.classList.add("inner");

    const front = document.createElement("div");
    front.classList.add("front");
    front.innerHTML = createFractionHTML(cardData.frac, cardData.color);

    const back = document.createElement("div");
    back.classList.add("back");
    back.textContent = "?";

    inner.appendChild(front);
    inner.appendChild(back);
    card.appendChild(inner);

    // –í –æ—Ç–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ –≤—Å–µ –∫–∞—Ä—Ç—ã —Å—Ä–∞–∑—É –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã
    if (openMode) {
      card.classList.add("flipped");
    }

    card.addEventListener("click", () => flipCard(card));
    board.appendChild(card);
  });
}

function allPairsFound() {
  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä —Ä–∞–≤–Ω–æ pairs.length, matched-–∫–∞—Ä—Ç—ã –ø–æ–º–µ—á–µ–Ω—ã –∫–ª–∞—Å—Å–æ–º matched
  const matchedCards = board.querySelectorAll('.card.matched').length;
  return matchedCards === cards.length; // —Ç.–∫. matched —Å—Ç–∞–≤–∏—Ç—Å—è –Ω–∞ –æ–±–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∞—Ä—ã
}

async function handleWin() {
  lock = true;
  // –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã –ª–∏—Ü–æ–º –≤–≤–µ—Ä—Ö, —á—Ç–æ–±—ã –±—ã–ª–æ –≤–∏–¥–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
  const allCards = Array.from(board.querySelectorAll('.card'));
  allCards.forEach(card => card.classList.add('flipped'));

  await window.runConfetti(3000);

  // –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –Ω–∞–∑–∞–¥ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É
  allCards.forEach(card => card.classList.remove('flipped'));
  setTimeout(() => {
    createBoard();
  }, FLIP_MS);
}

function flipCard(card) {
  if (lock) return;

  if (openMode) {
    // –û—Ç–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º: —Ä–∞–±–æ—Ç–∞–µ–º —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏
    if (card.classList.contains("matched")) return;

    if (card.classList.contains("selected")) {
      // –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è: —É–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
      card.classList.remove("selected");
      selected = selected.filter(c => c !== card);
      return;
    }

    card.classList.add("selected");
    selected.push(card);

    if (selected.length === 2) {
      const [c1, c2] = selected;
      lock = true;
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã —Å–∏–Ω–∏–π –±–æ—Ä–¥–µ—Ä –≤—Ç–æ—Ä–æ–π –∫–∞—Ä—Ç—ã –±—ã–ª –≤–∏–¥–µ–Ω
      setTimeout(() => {
        if (c1.dataset.pair === c2.dataset.pair) {
          // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: –∑–µ–ª—ë–Ω—ã–π –±–æ—Ä–¥–µ—Ä
          c1.classList.remove("selected");
          c2.classList.remove("selected");
          c1.classList.add("matched");
          c2.classList.add("matched");
          selected = [];
          lock = false;
          if (allPairsFound()) {
            handleWin();
          }
        } else {
          // –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: –∫—Ä–∞—Å–Ω—ã–π –±–æ—Ä–¥–µ—Ä –∏ —Ç—Ä—è—Å–∫–∞
          c1.classList.remove("selected");
          c2.classList.remove("selected");
          c1.classList.add("mismatch");
          c2.classList.add("mismatch");
          c1.classList.add("shake");
          c2.classList.add("shake");
          setTimeout(() => {
            c1.classList.remove("shake");
            c2.classList.remove("shake");
            c1.classList.remove("mismatch");
            c2.classList.remove("mismatch");
            selected = [];
            lock = false;
          }, SHAKE_MS);
        }
      }, 250); // 250–º—Å –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–∏–Ω–µ–≥–æ –±–æ—Ä–¥–µ—Ä–∞
    }
  } else {
    // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
    if (card.classList.contains("flipped")) return;

    card.classList.add("flipped");
    flipped.push(card);

    if (flipped.length === 2) {
      const [c1, c2] = flipped;
      if (c1.dataset.pair === c2.dataset.pair) {
        // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: –±–æ—Ä–¥–µ—Ä –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞
        setTimeout(() => {
          c1.classList.add("matched");
          c2.classList.add("matched");
          if (allPairsFound()) {
            handleWin();
          }
        }, FLIP_MS);
        flipped = [];
      } else {
        lock = true;
        // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –≤—Ç–æ—Ä–æ–π –∫–∞—Ä—Ç—ã
        setTimeout(() => {
          // –ö—Ä–∞—Å–Ω—ã–π –±–æ—Ä–¥–µ—Ä –≤–æ –≤—Ä–µ–º—è –æ—à–∏–±–∫–∏
          c1.classList.add("mismatch");
          c2.classList.add("mismatch");
          // –¢—Ä—è—Å–∫–∞
          c1.classList.add("shake");
          c2.classList.add("shake");
          setTimeout(() => {
            c1.classList.remove("shake");
            c2.classList.remove("shake");
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–µ—Ä—ã–π –±–æ—Ä–¥–µ—Ä
            c1.classList.remove("mismatch");
            c2.classList.remove("mismatch");
            // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞–∑–∞–¥
            c1.classList.remove("flipped");
            c2.classList.remove("flipped");
            flipped = [];
            lock = false;
          }, SHAKE_MS);
        }, FLIP_MS);
      }
    }
  }
}

async function closeOpenCardsThen(cb) {
  if (lock) return;
  
  if (openMode) {
    // –í –æ—Ç–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
    const selectedCards = Array.from(board.querySelectorAll('.card.selected'));
    selectedCards.forEach(card => card.classList.remove('selected'));
    selected = [];
  } else {
    // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã
    const openCards = Array.from(board.querySelectorAll('.card.flipped'));
    if (openCards.length === 0) {
      cb && cb();
      return;
    }
    lock = true;
    openCards.forEach(card => card.classList.remove('flipped'));
    await new Promise(r => setTimeout(r, FLIP_MS));
    lock = false;
  }
  
  cb && cb();
}

restartBtn.addEventListener("click", () => {
  closeOpenCardsThen(() => {
    createBoard();
  });
});

toggleModeBtn.addEventListener("click", () => {
  closeOpenCardsThen(() => {
    easyMode = !easyMode;
    toggleModeBtn.textContent = easyMode ? "–í—ã–∫–ª—é—á–∏—Ç—å –ª—ë–≥–∫–∏–π —Ä–µ–∂–∏–º" : "–í–∫–ª—é—á–∏—Ç—å –ª—ë–≥–∫–∏–π —Ä–µ–∂–∏–º";
    createBoard();
  });
});

toggleOpenModeBtn.addEventListener("click", () => {
  closeOpenCardsThen(() => {
    openMode = !openMode;
    toggleOpenModeBtn.textContent = openMode ? "–í—ã–∫–ª—é—á–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º" : "–í–∫–ª—é—á–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º";
    createBoard();
  });
});

createBoard();
