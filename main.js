const board = document.getElementById("gameBoard");
const restartBtn = document.getElementById("restart");
// –ö–Ω–æ–ø–∫–∞ –ª—ë–≥–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ —É–¥–∞–ª–µ–Ω–∞
const toggleOpenModeBtn = document.getElementById("toggleOpenMode");
const hintEl = document.getElementById("hint");

let flipped = [];
let selected = []; // –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞
let lock = false;
// –õ—ë–≥–∫–∏–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∫–æ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω
// easyMode –±–æ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
let easyMode = true;
let openMode = false; // –Ω–æ–≤—ã–π –æ—Ç–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º

// –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–π
const FLIP_MS = 600; // –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å transition —É .inner
const SHAKE_MS = 400;

// üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä—ã –¥—Ä–æ–±–µ–π
const pairs = [
  ["1/2", "2/4"],
  ["1/3", "2/6"],
  ["3/4", "6/8"],
  ["2/5", "4/10"],
  ["5/6", "10/12"],
  ["1/5", "2/10"],
  ["2/3", "4/6"],
  ["3/5", "6/10"]
];

// –ü–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –ª—ë–≥–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
const colors = [
  "red", "blue", "green", "purple",
  "orange", "teal", "brown", "magenta"
];

let cards = [];
pairs.forEach(([a, b], index) => {
  cards.push({ pair: a, frac: a, color: colors[index] });
  cards.push({ pair: a, frac: b, color: colors[index] });
});

function shuffle(array) {
  return array.sort(() => Math.random() - 0.5);
}

function createFractionHTML(frac, color) {
  const [num, den] = frac.split("/");
  // –í –æ—Ç–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ —á—ë—Ä–Ω—ã–π; –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–º –æ—Ç–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ ‚Äî —Ü–≤–µ—Ç–Ω–æ–π (–ª—ë–≥–∫–∏–π)
  const displayColor = openMode ? 'black' : color;
  return `
    <div class="fraction" style="color: ${displayColor}">
      <div class="numerator">${num}</div>
      <div class="denominator">${den}</div>
    </div>
  `;
}

function createBoard() {
  board.innerHTML = "";
  flipped = [];
  selected = [];
  lock = false;
  if (hintEl) {
    if (openMode) {
      // –í –æ—Ç–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ–æ—Ä–º—É–ª—É
      renderGenericHint();
    } else {
      renderGenericHint();
    }
  }

  shuffle(cards).forEach(cardData => {
    const card = document.createElement("div");
    card.classList.add("card");
    card.dataset.pair = cardData.pair;
    card.dataset.frac = cardData.frac;

    const inner = document.createElement("div");
    inner.classList.add("inner");

    const front = document.createElement("div");
    front.classList.add("front");
    front.innerHTML = createFractionHTML(cardData.frac, cardData.color);

    const back = document.createElement("div");
    back.classList.add("back");
    back.textContent = "?";

    inner.appendChild(front);
    inner.appendChild(back);
    card.appendChild(inner);

    // –í –æ—Ç–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ –≤—Å–µ –∫–∞—Ä—Ç—ã —Å—Ä–∞–∑—É –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã
    if (openMode) {
      card.classList.add("flipped");
    }

    card.addEventListener("click", () => flipCard(card));
    board.appendChild(card);
  });
}

function allPairsFound() {
  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä —Ä–∞–≤–Ω–æ pairs.length, matched-–∫–∞—Ä—Ç—ã –ø–æ–º–µ—á–µ–Ω—ã –∫–ª–∞—Å—Å–æ–º matched
  const matchedCards = board.querySelectorAll('.card.matched').length;
  return matchedCards === cards.length; // —Ç.–∫. matched —Å—Ç–∞–≤–∏—Ç—Å—è –Ω–∞ –æ–±–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∞—Ä—ã
}

async function handleWin() {
  lock = true;
  const allCards = Array.from(board.querySelectorAll('.card'));
  
  if (openMode) {
    // –ö–æ–Ω—Ñ–µ—Ç—Ç–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É, —Å–æ–∑–¥–∞–≤–∞—è –¥–ª–∏–Ω–Ω—É—é –ø–∞—É–∑—É –∫–∞–∫ –≤ –∑–∞–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ
    await window.runConfetti(3000);

    // –ü–æ—Å–ª–µ –ø–∞—É–∑—ã –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–∫—Ä—ã—Ç–∏—è ‚Üí –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è ‚Üí –æ—Ç–∫—Ä—ã—Ç–∏—è
    // 1) –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã –∞–Ω–∏–º–∞—Ü–∏–µ–π
    allCards.forEach(card => card.classList.remove('flipped'));
    await new Promise(r => setTimeout(r, FLIP_MS));

    // 2) –ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ
    createBoard();

    // 3) –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å—Ç–∞—Ä—Ç—É–µ–º –∏–∑ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const freshlyBuilt = Array.from(board.querySelectorAll('.card'));
    freshlyBuilt.forEach(card => card.classList.remove('flipped'));

    // 4) –ù–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä –æ—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã –∞–Ω–∏–º–∞—Ü–∏–µ–π
    await new Promise(requestAnimationFrame);
    await new Promise(requestAnimationFrame);
    freshlyBuilt.forEach(card => card.classList.add('flipped'));
    await new Promise(r => setTimeout(r, FLIP_MS));

    lock = false;
    return;
  }

  // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º (–∫–∞–∫ –±—ã–ª–æ)
  // –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã –ª–∏—Ü–æ–º –≤–≤–µ—Ä—Ö, —á—Ç–æ–±—ã –±—ã–ª–æ –≤–∏–¥–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
  allCards.forEach(card => card.classList.add('flipped'));

  await window.runConfetti(3000);

  // –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –Ω–∞–∑–∞–¥ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É
  allCards.forEach(card => card.classList.remove('flipped'));
  setTimeout(() => {
    createBoard();
  }, FLIP_MS);
}

function flipCard(card) {
  if (lock) return;

  // –í –∑–∞–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ–æ—Ä–º—É–ª—É (–±–µ–∑ —á–∏—Å–µ–ª)
  if (hintEl && card.dataset.frac && !openMode) {
    renderGenericHint();
  }

  if (openMode) {
    // –û—Ç–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º: —Ä–∞–±–æ—Ç–∞–µ–º —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    if (card.classList.contains("matched")) return;

    if (card.classList.contains("selected")) {
      // –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è: —É–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
      card.classList.remove("selected");
      selected = selected.filter(c => c !== card);
      // –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ–æ—Ä–º—É–ª—É
      if (selected.length === 0) {
        renderGenericHint();
      } else {
        // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—É –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–µ
        const last = selected[selected.length - 1];
        if (last && last.dataset.frac) updateHint(last.dataset.frac);
      }
      return;
    }

    card.classList.add("selected");
    selected.push(card);
    // –ü–æ–∫–∞–∑–∞—Ç—å —Ü–∏—Ñ—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
    if (card.dataset.frac) updateHint(card.dataset.frac);

    if (selected.length === 2) {
      const [c1, c2] = selected;
      lock = true;
      setTimeout(() => {
        if (c1.dataset.pair === c2.dataset.pair) {
          c1.classList.remove("selected");
          c2.classList.remove("selected");
          c1.classList.add("matched");
          c2.classList.add("matched");
          selected = [];
          // –ü–æ—Å–ª–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤–µ—Ä–Ω—ë–º –æ–±—â—É—é —Ñ–æ—Ä–º—É–ª—É
          renderGenericHint();
          lock = false;
          if (allPairsFound()) {
            handleWin();
          }
        } else {
          c1.classList.remove("selected");
          c2.classList.remove("selected");
          c1.classList.add("mismatch");
          c2.classList.add("mismatch");
          c1.classList.add("shake");
          c2.classList.add("shake");
          setTimeout(() => {
            c1.classList.remove("shake");
            c2.classList.remove("shake");
            c1.classList.remove("mismatch");
            c2.classList.remove("mismatch");
            selected = [];
            // –ü–æ—Å–ª–µ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∞ —Ç–æ–∂–µ –≤–µ—Ä–Ω—ë–º –æ–±—â—É—é —Ñ–æ—Ä–º—É–ª—É
            renderGenericHint();
            lock = false;
          }, SHAKE_MS);
        }
      }, 250);
    }
  } else {
    // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
    if (card.classList.contains("flipped")) return;

    card.classList.add("flipped");
    flipped.push(card);

    if (flipped.length === 2) {
      const [c1, c2] = flipped;
      if (c1.dataset.pair === c2.dataset.pair) {
        setTimeout(() => {
          c1.classList.add("matched");
          c2.classList.add("matched");
          if (allPairsFound()) {
            handleWin();
          }
        }, FLIP_MS);
        flipped = [];
      } else {
        lock = true;
        setTimeout(() => {
          c1.classList.add("mismatch");
          c2.classList.add("mismatch");
          c1.classList.add("shake");
          c2.classList.add("shake");
          setTimeout(() => {
            c1.classList.remove("shake");
            c2.classList.remove("shake");
            c1.classList.remove("mismatch");
            c2.classList.remove("mismatch");
            c1.classList.remove("flipped");
            c2.classList.remove("flipped");
            flipped = [];
            lock = false;
          }, SHAKE_MS);
        }, FLIP_MS);
      }
    }
  }
}

function renderGenericHint() {
  if (!hintEl) return;
  hintEl.innerHTML = `
    <span style="display:inline-flex;align-items:center;gap:8px;">
      <span class="fraction">
        <span class="numerator">a</span>
        <span class="denominator">b</span>
      </span>
      = a √∑ b * 100 = ... %
    </span>
  `;
}

function updateHint(frac) {
  const [aStr, bStr] = frac.split("/");
  const a = Number(aStr);
  const b = Number(bStr);
  if (!Number.isFinite(a) || !Number.isFinite(b) || b === 0) {
    hintEl.innerHTML = "";
    return;
  }
  const percent = (a / b) * 100;
  const percentStr = Number.isInteger(percent)
    ? String(percent)
    : percent.toFixed(2).replace(/\.00$/, '').replace(/(\.\d)0$/, '$1');

  hintEl.innerHTML = `
    <span style="display:inline-flex;align-items:center;gap:8px;">
      <span class="fraction">
        <span class="numerator">${a}</span>
        <span class="denominator">${b}</span>
      </span>
      = ${a} √∑ ${b} * 100 = ${percentStr} %
    </span>
  `;
}

async function closeOpenCardsThen(cb) {
  if (lock) return;
  
  if (openMode) {
    // –í –æ—Ç–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
    const selectedCards = Array.from(board.querySelectorAll('.card.selected'));
    selectedCards.forEach(card => card.classList.remove('selected'));
    selected = [];
  } else {
    // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã
    const openCards = Array.from(board.querySelectorAll('.card.flipped'));
    if (openCards.length === 0) {
      cb && cb();
      return;
    }
    lock = true;
    openCards.forEach(card => card.classList.remove('flipped'));
    await new Promise(r => setTimeout(r, FLIP_MS));
    lock = false;
  }
  
  cb && cb();
}

restartBtn.addEventListener("click", () => {
  if (openMode) {
    // –í –æ—Ç–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ: –∑–∞–∫—Ä—ã—Ç—å -> –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å -> –æ—Ç–∫—Ä—ã—Ç—å
    if (lock) return;
    lock = true;
    const all = Array.from(board.querySelectorAll('.card'));
    all.forEach(card => card.classList.remove('flipped'));
    setTimeout(() => {
      createBoard();
      const rebuilt = Array.from(board.querySelectorAll('.card'));
      rebuilt.forEach(card => card.classList.remove('flipped'));
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          rebuilt.forEach(card => card.classList.add('flipped'));
          setTimeout(() => { lock = false; }, FLIP_MS);
        });
      });
    }, FLIP_MS);
  } else {
    // –í –∑–∞–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ: –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–∞–∫ —Ä–∞–Ω—å—à–µ
    closeOpenCardsThen(() => {
      createBoard();
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—ë–≥–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ —É–¥–∞–ª—ë–Ω ‚Äî –æ–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

toggleOpenModeBtn.addEventListener("click", () => {
  closeOpenCardsThen(() => {
    openMode = !openMode;
    toggleOpenModeBtn.textContent = openMode ? "Open Modus ausschalten" : "Open Modus";
    // –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ª—ë–≥–∫–∏–π —Ä–µ–∂–∏–º —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–º (—á—ë—Ä–Ω—ã–µ –¥—Ä–æ–±–∏)
    // –ü—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞ ‚Äì –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª—ë–≥–∫–∏–π (—Ü–≤–µ—Ç–Ω–æ–π)
    easyMode = !openMode;
    animateFlipAll(openMode);
  });
});

createBoard();

function animateFlipAll(toOpenMode) {
  const allCards = Array.from(board.querySelectorAll('.card'));
  if (allCards.length === 0) {
    // –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º
    if (toOpenMode) {
      renderGenericHint();
    } else {
      renderGenericHint();
    }
    createBoard();
    return;
  }
  lock = true;
  
  if (toOpenMode) {
    // –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞: —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º
    board.innerHTML = "";
    flipped = [];
    selected = [];
    
    shuffle(cards).forEach(cardData => {
      const card = document.createElement("div");
      card.classList.add("card");
      card.dataset.pair = cardData.pair;
      card.dataset.frac = cardData.frac;

      const inner = document.createElement("div");
      inner.classList.add("inner");

      const front = document.createElement("div");
      front.classList.add("front");
      front.innerHTML = createFractionHTML(cardData.frac, cardData.color);

      const back = document.createElement("div");
      back.classList.add("back");
      back.textContent = "?";

      inner.appendChild(front);
      inner.appendChild(back);
      card.appendChild(inner);

      card.addEventListener("click", () => flipCard(card));
      board.appendChild(card);
    });

    // –í –æ—Ç–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ–æ—Ä–º—É–ª—É
    renderGenericHint();

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ
    const newCards = Array.from(board.querySelectorAll('.card'));
    requestAnimationFrame(() => {
      requestAnimationFrame(() => {
        newCards.forEach(card => card.classList.add('flipped'));
        setTimeout(() => {
          lock = false;
        }, FLIP_MS);
      });
    });
  } else {
    // –ü—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞: —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞–∑–∞–¥, –ø–æ—Ç–æ–º –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    allCards.forEach(card => card.classList.remove('flipped'));
    
    setTimeout(() => {
      // –ü–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      board.innerHTML = "";
      flipped = [];
      selected = [];
      
      shuffle(cards).forEach(cardData => {
        const card = document.createElement("div");
        card.classList.add("card");
        card.dataset.pair = cardData.pair;
        card.dataset.frac = cardData.frac;

        const inner = document.createElement("div");
        inner.classList.add("inner");

        const front = document.createElement("div");
        front.classList.add("front");
        front.innerHTML = createFractionHTML(cardData.frac, cardData.color);

        const back = document.createElement("div");
        back.classList.add("back");
        back.textContent = "?";

        inner.appendChild(front);
        inner.appendChild(back);
        card.appendChild(inner);

        card.addEventListener("click", () => flipCard(card));
        board.appendChild(card);
      });

      renderGenericHint();
      lock = false;
    }, FLIP_MS);
  }
}
